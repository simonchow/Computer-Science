import javafx.application.*;


import javafx.stage.*;
import javafx.scene.*;
import javafx.scene.paint.*;
import javafx.scene.shape.*;
import javafx.animation.*;

import static java.util.Calendar.*;
import java.util.Calendar;

public class SodukuSolver extends Application{
	public static void main (String [] args)
	{
		launch(args);
	}

	@Override public void start(Stage primaryStage) throws Exception
	{
		int radius = 300;
		int xcenter = 360;
		int ycenter = 360;
		int tickLength = 30;
		int shortTick = 10;
		
		Color trans = Color.TRANSPARENT;
		Color black = Color.BLACK;
		
		int frameW = 800;
		int frameH = 800;
		int SceneW = 1000;
		int SceneH = 1000;
	
		Rectangle frame = new Rectangle();
		frame.setX(100);
		frame.setY(100);
		frame.setWidth(frameW);
		frame.setHeight(frameH);
		frame.setFill(Color.WHITE);
		frame.setStroke(black);
		
		Line horLines[] = new Line[8];  //Creates the larger tick marks of the clock)
		for (int i = 0; i < horLines.length; i++)
		{
			horLines[i] = new Line();
			horLines[i].setStartX(100 + (i + 1) * (frameW/9));
			horLines[i].setStartY(100);
			horLines[i].setEndX(100 + (i + 1) * (frameW/9));
			horLines[i].setEndY(900);
			horLines[i].setStrokeWidth(1);
		}
		
		Line vertLines[] = new Line[8];  //Creates the larger tick marks of the clock)
		for (int i = 0; i < horLines.length; i++)
		{
			vertLines[i] = new Line();
			vertLines[i].setStartX(100 + (i + 1) * (frameW/9));
			vertLines[i].setStartY(100);
			vertLines[i].setEndX(100 + (i + 1) * (frameW/9));
			vertLines[i].setEndY(900);
			vertLines[i].setStrokeWidth(1);
		}
		
		
		
		
		Group root = new Group();
		root.getChildren().addAll(frame);
		for (int a = 0; a < horLines.length; a++)
		{
			root.getChildren().addAll(horLines[a]);
		}
		
		Scene scene = new Scene(root, SceneW, SceneH);
		primaryStage.setScene(scene);
		primaryStage.setTitle("Sudoku");
		primaryStage.show();
	}
}

       
