import java.util.Arrays;

import javafx.application.*;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.stage.*;
import javafx.scene.*;
import javafx.scene.control.Button;
import javafx.scene.paint.*;
import javafx.scene.shape.*;

public class SudokuSolver extends Application{
	//create an empty string to hold the values for inputting numbers into the sudoku board
	String numHolder = "";
	//creates 81 buttons, one for each spot on the sudoku board
	Button[][] NumInputs = new Button[9][9]; 

	public static void main (String [] args)
	{
		launch(args);
	}

	@Override public void start(Stage primaryStage) throws Exception
	{
		//sets the dimensions of the scene and the sudoku board
		int SceneW = 1000;
		int SceneH = 1000;
		int frameW = (int) (0.8*SceneW);
		int frameH = (int) (0.8*SceneH);
		double squareLength = 800/9;
	
		Rectangle frame = new Rectangle();
		frame.setX(100);
		frame.setY(100);
		frame.setWidth(frameW);
		frame.setHeight(frameH);
		frame.setFill(Color.WHITE);
		frame.setStroke(Color.BLACK);
		frame.setStrokeWidth(5);
		
		//Draws the squares for the sudoku board
		Line horLines[] = new Line[8]; 
		for(int i = 0; i < horLines.length; i++)
		{
			horLines[i] = new Line();
			horLines[i].setStartX((SceneW-frameW)/2 + (i + 1) * (frameW/9));
			horLines[i].setStartY((SceneH-frameH)/2);
			horLines[i].setEndX((SceneW-frameW)/2 + (i + 1) * (frameW/9));
			horLines[i].setEndY(SceneH - (SceneH-frameH)/2);
			
			if((i+1) % 3 == 0)
			{
				horLines[i].setStrokeWidth(5);
			}
			else
			{
				horLines[i].setStrokeWidth(1);
			}
		}
		Line vertLines[] = new Line[8];  //Creates the larger tick marks of the clock)
		for(int i = 0; i < horLines.length; i++)
		{
			vertLines[i] = new Line();
			vertLines[i].setStartX(((SceneW-frameW)/2));
			vertLines[i].setStartY((SceneH-frameH)/2 + (i + 1) * (frameH/9));
			vertLines[i].setEndX(SceneW - (SceneW - frameW)/2);
			vertLines[i].setEndY((SceneH-frameH)/2 + (i + 1) * (frameH/9));
			vertLines[i].setStrokeWidth(1);
			
			if((i+1) % 3 == 0)
			{
				vertLines[i].setStrokeWidth(5);
			}
			else
			{
				vertLines[i].setStrokeWidth(1);
			}
		}
		
		//creates the buttons for selecting which number you want to enter into the sudoku board (these are the top buttons)
		Button[] buttons = new Button[9];
		for(int i = 0; i < 9; i++)
		{
			buttons[i] = new Button();
			buttons[i].setText(Integer.toString(i+1));
			buttons[i].relocate(25 + i*100, 20);
			buttons[i].setMinSize(50, 50);
			
			final int a = i;
			
			buttons[i].setOnAction(new EventHandler<ActionEvent>() {
				@Override
				public void handle(ActionEvent event)
				{
					numHolder = Integer.toString(a+1);
				}
			});
		}
			
		//creates a blank button to erase any number input on the board
		Button blankBtn = new Button();
		blankBtn.setText("Erase");
		blankBtn.setMinSize(50, 50);
		blankBtn.relocate(925, 20);
		blankBtn.setOnAction(new EventHandler<ActionEvent>()
		{
			@Override
			public void handle(ActionEvent event)
			{
				numHolder = "";
			}
		});
		
		//creation of buttons for placement of numbers on sudoku board
		for(int i = 0; i < 9; i++)
		{
			for(int j = 0; j < 9; j++)
			{
				NumInputs[i][j] = new Button();
				NumInputs[i][j].setMinSize(50, 50);
				NumInputs[i][j].relocate(75 + squareLength/2 + squareLength*i, 75 + squareLength/2  + squareLength*j);
				
				
				final int a = i, b = j;
				NumInputs[i][j].setOnAction(new EventHandler<ActionEvent>() {
					@Override
					//places the selected numbers (from the top buttons) into the sudoku board
					public void handle(ActionEvent event)
					{
						if(numHolder.equals("") || check(a, b, Integer.parseInt(numHolder)))
						{
							NumInputs[a][b].setText(numHolder);	//original array?
						}
					}
				});
			}
		}
		
		
		//Creation of go button to solve the sudoku
		Button goBtn = new Button();
		goBtn.setText("Go!");
		goBtn.setMinSize(100, 50);
		goBtn.relocate(200, SceneH - 75);
		goBtn.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event)
			{
				if(solver(0, 0) == false)
				{
					System.out.println("Happy");
				}
				else
				{
					System.out.println("Sad");
				}
			}
		});
		
		//Creation of the reset button to reset the board at any time (typically after solving one sudoku)
		Button resetBtn = new Button();
		resetBtn.setText("Reset");
		resetBtn.setMinSize(150, 50);
		resetBtn.relocate(650, SceneH - 75);
		resetBtn.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			//resets the board
			public void handle(ActionEvent event)
			{
				for(int i = 0; i < 9; i++)
				{
					for(int j = 0; j < 9; j++)
					{
						NumInputs[i][j].setText("");
					}
				}
			}
		});

		Group root = new Group();
		root.getChildren().addAll(frame,blankBtn,goBtn,resetBtn);
		for (int a = 0; a < horLines.length; a++)
		{
			root.getChildren().addAll(horLines[a]);
		}
		for (int a = 0; a < vertLines.length; a++)
		{
			root.getChildren().addAll(vertLines[a]);
		}
		for (int a = 0; a < buttons.length; a++)
		{
			root.getChildren().addAll(buttons[a]);
		}
		for (int a = 0; a < NumInputs.length; a++)
		{
			root.getChildren().addAll(NumInputs[a]);
		}
		
		Scene scene = new Scene(root, SceneW, SceneH);
		primaryStage.setScene(scene);
		primaryStage.setTitle("Sudoku");
		primaryStage.show();
	}

	//this check method makes sure that there are no two of the same numbers in any row, column or box
	public boolean check(int row, int col, int num)
	{
		for(int i = 0; i < 9; i++)
		{
			if(buttonToInt(NumInputs[row][i]) == num)
			{
				return false;
			}
		}
		
		for(int i = 0; i < 9; i++)
		{
			if(buttonToInt(NumInputs[i][col]) == num)
			{
				return false;
			}
		}
		
		int horizSection = 3 * (col/3);
		int vertSection = 3 * (row/3);
		
		for(int i = 0; i < 3; i++)
		{
			for(int j = 0; j < 3; j ++)
			{
				if(buttonToInt(NumInputs[vertSection + i][horizSection + j]) == num)
				{
					return false;
				}
			}
		}
		
		return true;
	}
	
	//this method converts the text in a button to an integer as the check and solve methods require number inputs to perform their functions
	public int buttonToInt(Button b)
	{
		String text = b.getText();
		if(text.equals(""))
		{
			return 0;
		}
		else return Integer.parseInt(text);
	}

	//sudoku solving algorithm
	public boolean solver(int row, int col)
	{
		//goes to next row
		if (col >= NumInputs.length)
		{
			col = 0;
			row++;
		}
		
		//finishes solving 
		if(row >= NumInputs.length)
		{
			return true;
		}
		
		else
		{
			//skips to next button if current button is already filled
			if(buttonToInt(NumInputs[row][col]) != 0)
			{
				return solver(row, col + 1);
			}
			
			//otherwise...
			else
			{
				for(int i = 1; i <= 9; i++)
				{
					//fills the button with a number
					if(check(row, col, i))
					{
						NumInputs[row][col].setText(Integer.toString(i));
						
						//moves on to next button
						// if it succeeded, this number doesn't change
						if(solver(row, col + 1))
						{
							return true;
						}
						//otherwise, it didn't work. sets button as blank
						else
						{
							NumInputs[row][col].setText("");
						}
					}
				}
				System.out.println(row + " " + col);
				return false;
			}
		}
	}
}

       
